[comment encoding = UTF-8 /]
[module generateInitDb('http://www.businessdecision.fr/Generator')]
[import org::bd::pfe::generator::persistance::packagePath /]

[template public generateInitDb(persistance : PersistanceObject)  {packageName : String = persistance.eContainer(Application)._package;    projectName : String = persistance.eContainer(Application).name;}]

[file('/pfe-service/src/main/java/'.concat(persistance.eContainer(PersistanceModel).eContainer(Application)._package.convertPackageToPath() .concat('/initDb/')).concat('InitDb.java'), false, 'UTF-8')]
package com.bd.initDb;

import java.util.Collection;
import java.util.HashSet;
import java.util.Set;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import [packageName/].configuration.JavaConfig;
 [for(p:PersistanceObject | persistance.eContainer(Application).persistanceModel.persiatnceObjets)]
import [packageName/].persistance.[p.name.toUpperFirst()/]    ;
[/for]
import [packageName/].persistance.Privilege;
import [packageName/].persistance.Role;
[for(p:PersistanceObject | persistance.eContainer(Application).persistanceModel.persiatnceObjets)]
import [packageName/].service.[p.name.toUpperFirst()/]Service   ;
[/for]
import [packageName/].service.PermissionService;
import [packageName/].service.PrivilegeService;
import [packageName/].service.RoleService;
 

public class InitDb {
 
	public static void main(String['[]'/] args) {
		   ApplicationContext ctx1 =new AnnotationConfigApplicationContext(JavaConfig.class) ;
		    PrivilegeService privilegeService = (PrivilegeService) ctx1.getBean("privilegeServiceImplement") ;
		    RoleService roleService  =(RoleService) ctx1.getBean("roleServiceImplement") ;
		    PermissionService permissionService = (PermissionService) ctx1.getBean("permissionServiceImplement") ;
		    PasswordEncoder passwordEncoder =(PasswordEncoder) ctx1.getBean("passwordEncoder") ;
	        [for(p:PersistanceObject | persistance.eContainer(Application).persistanceModel.persiatnceObjets)]
            [p.name.toUpperFirst()/]Service [p.name.toLowerFirst()/]Service = ([p.name.toUpperFirst()/]Service) ctx1.getBean("[p.name.toLowerFirst()/]ServiceImplement");
            [/for]
		    

   [for(p:PersistanceObject | persistance.eContainer(Application).persistanceModel.persiatnceObjets)]
               [if(p.isAuthentification)]	
		    [p.name.toUpperFirst()/] user = new [p.name.toUpperFirst()/]() ;
            [/if]
  [/for]
        
		    user.setAcountActivated(true);
		    user.setAcountBloqued(false);
		    user.setLogin       ("test");
		    user.setEmail       ("test@bd.com");
		    user.setName       ("test");
		    user.setLastName("test");
		    user.setPwd          ("test");
		    user.setFirstLogin(false);
		    user.setPwd(((BCryptPasswordEncoder) passwordEncoder).encode(user.getPwd()));
		    
		   
		    
		    
	    	Role role=    new Role() ;
	    	role.setRole("role  admin 1 ");
	  
	    	
	    	 
	    Privilege p     = new Privilege("gestion des utilisateurs" ,"");
	    Privilege p1   = new Privilege("gestion des utilisateurs" ,"gestionUsers.jsf");
        Privilege p2  = new Privilege("gestion des roles "           ,"gestionRoles.jsf");
		Privilege p3  = new Privilege("gestion des permissions" ,"gestionPermissions.jsf");
		
		p1.setPrivilegeSup(p);
		p2.setPrivilegeSup(p);
		p3.setPrivilegeSup(p);
		
	  		Privilege p4 = new Privilege("gestions des projets","");
		
		Privilege p5 = new Privilege("gestions des projets" ,"gestionProjets.jsf");
		Privilege p6= new Privilege("gestion des taches "   ,"gestionTasks.jsf");

		
		p5.setPrivilegeSup(p4);
		p6.setPrivilegeSup(p4);
		

		privilegeService.createPrivilege(p) ;
		privilegeService.createPrivilege(p1) ;
		privilegeService.createPrivilege(p2) ;
		privilegeService.createPrivilege(p3) ;
		privilegeService.createPrivilege(p4) ;
		privilegeService.createPrivilege(p5) ;
		privilegeService.createPrivilege(p6) ;
	    Set <Privilege> privileges= new HashSet<Privilege>() ;
	    privileges.addAll((Collection<? extends Privilege>) privilegeService.findAll()) ;
		role.setPrivileges(privileges);
	    user.setRole(role);
	    roleService.updateRole(role) ;
         [if(persistance.isAuthentification)]  [persistance.name.toLowerFirst()/]Service.create[persistance.name.toUpperFirst()/](user) ;      [/if]
  	    for(Privilege pr:user.getRole().getPrivileges())
  		    	{
 			        	if(pr.getPrivilegeSup()!=null) 	      permissionService.addPermissionToUserEtPrivilege(user,pr, true, true, true);
  			    }
	    	
	}

}

[/file]
[/template]
