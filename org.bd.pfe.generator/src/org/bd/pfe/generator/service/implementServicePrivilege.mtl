[comment encoding = UTF-8 /]
[module implementServicePrivilege('http://www.businessdecision.fr/Generator')]
[import org::bd::pfe::generator::persistance::packagePath /]


[template public generateImplementServicePrivilege(persistance :PersistanceObject)]

[file('/pfe-service/src/main/java/'.concat(persistance.eContainer(PersistanceModel).eContainer(Application)._package.convertPackageToPath() .concat('/implement/')).concat('PrivilegeServiceImplement').concat('.java'),false,'UTF-8')]
package [persistance.eContainer(PersistanceModel).eContainer(Application)._package.concat('.implement')/];

import java.util.*;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.service')/].PermissionService;
import [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.repository').concat('.PrivilegeRepository')/];
import [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.persistance.*')/];
import [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.service')/].PrivilegeService;


 
@Service
public class PrivilegeServiceImplement implements PrivilegeService {

	@Autowired
	PrivilegeRepository privilegeRepository;
	
	
	public PrivilegeServiceImplement()
    {     
          super();      }



@Transactional
	public Boolean createPrivilege(Privilege privilege){
		privilegeRepository.save(privilege);
		return true;
	}
	
	@Transactional
	public Boolean updatePrivilege(Privilege privilege){
		privilegeRepository.save(privilege);
		return true;
	}
	
	@Transactional
	 public Boolean deletePrivilege(Privilege privilege){
		privilegeRepository.delete(privilege);
		return true;
	}
	@Transactional
	public List<Privilege> findAll(){
		return privilegeRepository.findAll();
	}
	@Transactional
	public Privilege findPrivilegeById (Long id) {
		return privilegeRepository.findOne(id);
	}
	


	
	public Boolean assign[persistance.name.toUpperFirst()/]ToPrivilege([persistance.name.toUpperFirst()/]  [persistance.name.toLowerFirst()/] ,Privilege privilege ,Boolean create , Boolean delete  ,  Boolean update)
	{
		Permission permission = new Permission();
		permission.set[persistance.name.toUpperFirst()/] ([persistance.name.toLowerFirst()/] );
		permission.setPrivilege(privilege);
		permission.setCreate(create);
		permission.setDelete(delete);
		permission.setUpdate(update);
		return null;
	
	}

	 

 
 	public Privilege findPrivilegeByName(String name) {
  		return  privilegeRepository.findPrivilegeByName(name) ;
 	}

 	
 	
	
	public Privilege findPrivilegeByUrl(String url) {
		return privilegeRepository.findPrivilegeByUrl(url) ;
	}

	
	
	
	public List<Privilege> findPrivilegeParent() {
		List<Privilege> privileges ;
		List<Privilege> privilegesParent = new ArrayList<Privilege>();
		privileges = findAll();
		for (Privilege privilege: privileges ){
			if( privilege.getPrivilegeSup() == null)
			{
				privilegesParent.add(privilege);
			 }
		}
		return privilegesParent;
	}

	public Set<Privilege> findPrivilegeFils() {
	    	List<Privilege> privileges =findAll() ;
		    List<Privilege> privilegesParent = findPrivilegeParent();
		   privileges.removeAll(privilegesParent);
		   Set <Privilege> privilegeFils = new HashSet<Privilege>();
		   for(Privilege p :privileges )
		   {
			   privilegeFils.add(p)  ;
		   }
		   return privilegeFils ;
	}
 	 
}

[/file]
[/template]
