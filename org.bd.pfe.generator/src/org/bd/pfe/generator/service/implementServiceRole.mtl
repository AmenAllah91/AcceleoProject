[comment encoding = UTF-8 /]
[module implementServiceRole('http://www.businessdecision.fr/Generator')]
[import org::bd::pfe::generator::persistance::packagePath /]


[template public generateImplementServiceRole(persistance :PersistanceObject)]

[file('/pfe-service/src/main/java/'.concat(persistance.eContainer(PersistanceModel).eContainer(Application)._package.convertPackageToPath() .concat('/implement/')).concat('RoleServiceImplement').concat('.java'),false,'UTF-8')]
package [persistance.eContainer(PersistanceModel).eContainer(Application)._package.concat('.implement')/];

import java.util.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.repository').concat('.RoleRepository')/];
import [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.persistance').concat('.Privilege')/];
import [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.persistance').concat('.Role')/];
import [persistance.eContainer(PersistanceModel).eContainer(Application)._package .concat('.service')/].RoleService;


@Service
public class RoleServiceImplement implements RoleService {

	@Autowired
	RoleRepository roleRepository;
	
	
	public RoleServiceImplement() {
		super();
	}

	@Transactional
	public Boolean createRole(Role role){
		roleRepository.save(role);
		return true;
	}
	
	@Transactional
	public Boolean updateRole(Role role){
		roleRepository.save(role);
		return true;
	}
	
	@Transactional
	 public Boolean deleteRole(Role role){
		roleRepository.delete(role);
		return true;
	}
	@Transactional
	public List<Role> findAll(){
		return roleRepository.findAll();
	}
	@Transactional
	public Role findRoleById (Long id) {
		return roleRepository.findOne(id);
	}
	@Transactional
 public Role  findRoleByRole(String role)  
    {
		return roleRepository.findRoleByRole(role);
	}
	
@Transactional
	public Boolean asseignPrivilegeToRole(Role role,Privilege privilege) {
		 Set <Privilege > privileges = new HashSet<Privilege>(); 
		 privileges = role.getPrivileges();
		 privileges.add(privilege);
		role = new Role(role.getRole(),privileges);
		roleRepository.save(role);
		return null;
		
		
	}
}



[/file]
[/template]
